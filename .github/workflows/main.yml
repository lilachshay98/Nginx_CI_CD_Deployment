name: Docker Build and Test

on:
  push:
    branches:
      - main # or 'master' depending on your default branch
  pull_request:
    branches:
      - main # or 'master'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 3: Cache Docker layers to speed up build
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 4: Build the Docker images (nginx and test)
      - name: Build Nginx Docker image
        run: |
          docker build -t nginx_image ./nginx
          
      - name: Build Test Docker image
        run: |
          docker build -t test_image ./test

      # Step 5: Run the Nginx and test containers
      - name: Run containers and test
        run: |
          docker-compose up -d

      # Step 6: Run tests (replace with your test commands)
      - name: Run tests
        run: |
          docker exec test_container python /app/test.py

      # Step 7: Check if tests passed and write result to an artifact
      - name: Check Test Results
        run: |
          if test -f /output/succeeded; then
            echo "Tests passed!" && exit 0
          else
            echo "Tests failed!" && exit 1
          fi

      # Step 8: Upload result file (succeeded or fail) as an artifact
      - name: Upload test result
        uses: actions/upload-artifact@v2
        with:
          name: test-result
          path: /output/succeeded # or /output/fail

